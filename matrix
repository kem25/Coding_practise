// Matrix diagonal difference problem

import java.io.*;
import java.util.*;
import java.lang.*;


public class Solution {

    public static void main(String[] args) {
       /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner in = new Scanner(System.in);
        int N;
        N = in.nextInt();
        int [][]matrix=new int[N][N];
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                matrix[i][j] = in.nextInt();
            }
        }
    int d1 = 0;
    int d2 = 0;
    for(int i=0; i<N; i++){
        d1 += matrix[i][i];
        d2 += matrix[i][N-1-i];
    }
    int result = Math.abs(d1-d2);
    System.out.println(result);
}

}

/* Given an array, give an output that has six decimal precision of fractions of array's
positive, negative and zero elements*/

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
import java.math.RoundingMode;

public class Solution {
    public static String [] compareArray(int N, int[] arr){
        double result[]={0,0,0};
        for(int i=0; i<N; i++){
            if(arr[i]<0){
                result[1]++;
            }
            else if(arr[i]>0){
                result[0]++;
            }
            else{
               result[2]++; 
            }  
        }
        for(int j=0; j<result.length;j++){
            result[j]=result[j]/N;
        }
        DecimalFormat df = new DecimalFormat("#.######");
        df.setRoundingMode(RoundingMode.CEILING);
        String resulta[]= new String[3];
        for (int j=0; j<result.length;j++) {
        resulta[j]=df.format(result[j]);
}
        return resulta;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int N;
        N = in.nextInt();
        int []arr = new int[N];
        for(int i=0;i<N;i++){
            arr[i] = in.nextInt();
        }
         String [] result = compareArray(N,arr);
        for(int o=0; o<result.length; o++){
            System.out.println(result[o]);
        }
    }
}

//Stair-case
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                if((i+j) < N-1){
                    System.out.print(" ");
                }
                else{
                    System.out.print("#");
                }
                if(j == N-1){
                    System.out.print("\n");
                }
            }
        }
    }
}

// change 12 hr clock to 24 hr clock

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static String timeConversion(String s) {
        String result;
        String [] collect =  new String[3];
        String [] col =  new String[4];
        collect = s.split(":");
        int hours = Integer.parseInt(collect[0]);
        char collect1 = collect[2].charAt(2);
        col = collect[2].split("");
        if(collect1=='P'){
        hours = hours + 12;
            if(hours==24){
                result="12:"+collect[1]+":"+col[0]+col[1]; 
            }
            else{
               result=hours+":"+collect[1]+":"+col[0]+col[1]; 
            }
        }
        else{
            if(hours==12){
                 result="00:"+collect[1]+":"+col[0]+col[1];
            }
            else{
        result=collect[0]+":"+collect[1]+":"+col[0]+col[1];
            }
        }
        return result; 
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.next();
        String result = timeConversion(s);
        System.out.println(result);
    }

    //  height of binary tree calculation
/*
    class Node 
        int data;
        Node left;
        Node right;
    */
 
     static int height(Node root) {
         if (root == null) {
        return -1;
    }

    int lefth = height(root.left);
    int righth = height(root.right);

    if (lefth > righth) {
        return lefth +1;
    } else {
        return righth +1;
    }
    }
// level order traversal
 /* 
    
    class Node 
       int data;
       Node left;
       Node right;
   */
   void levelOrder(Node root) {
       Queue<Node> q = new LinkedList<Node>();
       q.add(root);
       while(q!=null){
           Node d= q.remove();
           System.out.print(d.data+" ");
           if(d.left!=null){
               q.add(d.left);
           }
           if(d.right!=null){
               q.add(d.right);
           }
       }
      
      
    }

// binary search tree insertion

/* Node is defined as :
 class Node 
    int data;
    Node left;
    Node right;
    
    */

static Node Insert(Node root,int value) {
    
 Node newNode = new Node();
    newNode.data = value;
    newNode.left = null;
    newNode.right = null;
    
    if (root == null) {
        return newNode;
    }
    
    addNode(root, newNode);
    return root;
}

static void addNode(Node root, Node newNode) {
    if (newNode.data < root.data) {
        if (root.left == null) {
            root.left = newNode;
        } else {
            addNode(root.left, newNode);
        }
    } else {
        if (root.right == null) {
            root.right = newNode;
        } else {
            addNode(root.right, newNode);
        } // else
    } 
       
    }
// Insertion at the tail of linkedlist

/*
  Insert Node at the end of a linked list 
  head pointer input could be NULL as well for empty list
  Node is defined as 
  class Node {
     int data;
     Node next;
  }
*/
Node Insert(Node head,int data) {
    Node node = head;
    if(node==null){
        node.data = data;
        node.next = null;
        return head;
    }
    else{
        while(node.next!=null){
            node=node.next;
        }
        Node newnode = new Node();
        node.next= newnode;
        newnode.data = data; 
        newnode.next = null;
        return head;
    }
    
// This is a "method-only" submission. 
// You only need to complete this method. 
  
}
// inser a new node at the head of linkedlist
/*
  Insert Node at the beginning of a linked list 
  head pointer input could be NULL as well for empty list
  Node is defined as 
  class Node {
     int data;
     Node next;
  }
*/
// This is a "method-only" submission. 
// You only need to complete this method. 

Node Insert(Node head,int x) {
    Node node = head;
    if(node==null){
        node.data=x;
        node.next=null;
        return head;     
    }
    else{
        Node newnode= new Node();
        newnode.data=x;
        newnode.next=head;
        return newnode;  
    }
    
}

// Insert node at particular position in linkedlist
/*
  Insert Node at a given position in a linked list 
  head can be NULL 
  First element in the linked list is at position 0
  Node is defined as 
  class Node {
     int data;
     Node next;
  }
*/
    

Node InsertNth(Node head, int data, int position) {
    Node node = head;
    int i=0;
    if(head==null){
        head.data=data;
        head.next=null;
        return head;   
    }
    else if(position==0){
        Node newnode = new Node();
        newnode.data=data;
        newnode.next=head;
        return newnode;
}
    else{
    while(i<position-1){
            node = node.next;
        i++;
        }
        Node tempnode = node.next;
        node.next = new Node();
        node.next.data = data;
        node.next.next = tempnode;
        return head;
    }
   // This is a "method-only" submission. 
    // You only need to complete this method.
        

}

// deletionof node from linkedlist
/*
  Delete Node at a given position in a linked list 
  head pointer input could be NULL as well for empty list
  Node is defined as 
  class Node {
     int data;
     Node next;
  }
*/
    // This is a "method-only" submission. 
    // You only need to complete this method. 

Node Delete(Node head, int position) {
    Node node = head;
    int i =0;
  if(position==0){
   head=head.next;
      return head;
  }
else{
    while(i<position-1){
        node= node.next;
        i++;
    }
    node.next= node.next.next;
    
    return head;
}
}

// Insertion and deletion into a queue using a stack

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        Stack<Integer> s = new Stack<Integer>();
        Stack<Integer>s1 = new Stack<Integer>();
        while(in.hasNext()==true){
        int x= in.nextInt();
        if(x==1){
            int y = in.nextInt();
            s.push(y);    
            }
 
        else if(x==2){
                while(!s.empty()){
                  int w = s.pop();
                    s1.push(w);
                }
            s1.pop();
            while(!s1.empty()){
                int x1 = s1.pop();
                s.push(x1);
            }
        
        }
        else if(x==3){
            while(!s.empty()){
                  int w = s.pop();
                    s1.push(w);
            }
           int r = s1.pop();
            System.out.println(r);
                 s1.push(r);
             while(!s1.empty()){
                int x2 = s1.pop();
                s.push(x2);
            }
        
        }
    }
    }
}
